There's 2 ways to declare array list:
- ArrayList objName = new ArrayList(); //requires type casting to access everything except for toString()
- ArrayList <className> objName = new ArrayList<className>(); // Does not require type casting to access everything
//Most efficient way to type cast
className objName = (className) objName.get(index);

//Normal commands used to
objName.add(obj);
objName.add(index, obj);
objName.set(index, obj);
objName.size();
objName.remove(index); 

//Common loops and commands

//Show all data from arraylist
output = "The list of obj : \n";
for(int i=0 ; i< objName.size() ; m++)
output += objName.get(i).toString() + "\n ";

//


//I personally think that bubble sort is easier than insertion sort but I'm gonna have the code of both here just in case


//Bubble Sort Code
//This sorts the string in ASC order (The > in the if statement)
int n = carList.size();
        Car temp;
        for(int i = 0; i < n - 1; i++)
        {
            for (int j = 1; j < n; j++)
            {
                Car c1 = carList.get(j-1);
                Car c2 = carList.get(j);
                
                if (c1.getModel().compareTo(c2.getModel()) > 0)
                {
                    temp = c1;
                    carList.set((j-1), c2);
                    carList.set(j, temp);
                }
            }
        }

//Bubble Sort Code 
//This sorts the string in DESC order (The < in the if statement)
int n = carList.size();
        Car temp;
        for(int i = 0; i < n - 1; i++)
        {
            for (int j = 1; j < n; j++)
            {
                Car c1 = carList.get(j-1);
                Car c2 = carList.get(j);
                
                if (c1.getModel().compareTo(c2.getModel()) < 0)
                {
                    temp = c1;
                    carList.set((j-1), c2);
                    carList.set(j, temp);
                }
            }
        }

//Insertion Sort Code
//This sorts the string in ASC order (The < in while statement)
Car c1, c2;
        for (int i = 1; i < carList.size(); i++)
        { 
            c1 = carList.get(i);
            String key = c1.getModel();
            int j=i-1;
            c2 = carList.get(j);
            String value2 = c2.getModel();
            while(j>=0 && key.compareTo(value2) < 0)
            { 
                carList.set((j+1),c2);
                j=j-1;
                if(j>=0)
                { 
                    c2 = carList.get(j);
                    value2 = c2.getModel();
                }
            }
            carList.set((j+1),c1);
        }

//Insertion Sort Code
//This sorts the string in DESC order (The > in while statement)
Car c1, c2;
        for (int i = 1; i < carList.size(); i++)
        { 
            c1 = carList.get(i);
            String key = c1.getModel();
            int j=i-1;
            c2 = carList.get(j);
            String value2 = c2.getModel();
            while(j>=0 && key.compareTo(value2) > 0)
            { 
                carList.set((j+1),c2);
                j=j-1;
                if(j>=0)
                { 
                    c2 = carList.get(j);
                    value2 = c2.getModel();
                }
            }
            carList.set((j+1),c1);
        }


//This is binary search if the DATA IS SORTED IN ASC ORDER (The part that changes is the < in if statement)
String search = "Proton";
        int low = 0, mid = -1, high = carList.size() -1, index = 0;
        boolean isFound = false;
        
        while (high >= low)
        {
            mid = (low+high)/2;
            Car c4 = carList.get(mid);
            
            if (search.compareTo(c4.getModel()) < 0)
            {
                high = mid - 1;
            }
            else if (search.compareTo(c4.getModel()) ==  0)
            {
                isFound = true;
                index = mid;
                break;
            }
            else
            {
                low = mid + 1;
            }
        }
        
        if (isFound)
        {
            Car c4 = carList.get(index);
            System.out.println("Details of vehicle " + search + ":\n" + c4.toString() +"\n" + "Was found at index: " + index);
        }
        else
        {
            System.out.println("Sorry, the vehicle " + search + " is NOT FOUND");
        }


//This is binary search if the DATA IS SORTED IN DESC ORDER (The part that changes is the > in if statement)
String search = "Proton";
        int low = 0, mid = -1, high = carList.size() -1, index = 0;
        boolean isFound = false;
        
        while (high >= low)
        {
            mid = (low+high)/2;
            Car c4 = carList.get(mid);
            
            if (search.compareTo(c4.getModel()) > 0)
            {
                high = mid - 1;
            }
            else if (search.compareTo(c4.getModel()) ==  0)
            {
                isFound = true;
                index = mid;
                break;
            }
            else
            {
                low = mid + 1;
            }
        }
        
        if (isFound)
        {
            Car c4 = carList.get(index);
            System.out.println("Details of vehicle " + search + ":\n" + c4.toString() +"\n" + "Was found at index: " + index);
        }
        else
        {
            System.out.println("Sorry, the vehicle " + search + " is NOT FOUND");
        }


//If needed in a emergency to use for test (very unreliable code)///////////////////////////////////////////////////////////////////////
// Method to perform binary search
public int binarySearch(List<Car> carList, String search, boolean ascending) {
    int low = 0;
    int high = carList.size() - 1;
    
    while (low <= high) {
        int mid = (low + high) / 2;
        Car c4 = carList.get(mid);
        
        int comparisonResult = compareStrings(search, c4.getModel(), ascending);
        
        if (comparisonResult == 0) {
            return mid; // Found
        } else if (comparisonResult < 0) {
            if (ascending) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        } else {
            if (ascending) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
    }
    
    return -1; // Not found
}

// Method to compare two strings based on the order (ascending or descending)
public int compareStrings(String str1, String str2, boolean ascending) {
    if (ascending) {
        return str1.compareTo(str2);
    } else {
        return str2.compareTo(str1);
    }
}

// Usage
String search = "Proton";
int indexAsc = binarySearch(carList, search, true);
int indexDesc = binarySearch(carList, search, false);

if (indexAsc != -1) {
    Car cAsc = carList.get(indexAsc);
    System.out.println("Details of vehicle " + search + ":\n" + cAsc.toString() + "\n" + "Was found at index: " + indexAsc);
} else {
    System.out.println("Sorry, the vehicle " + search + " is NOT FOUND in ascending order.");
}

if (indexDesc != -1) {
    Car cDesc = carList.get(indexDesc);
    System.out.println("Details of vehicle " + search + ":\n" + cDesc.toString() + "\n" + "Was found at index: " + indexDesc);
} else {
    System.out.println("Sorry, the vehicle " + search + " is NOT FOUND in descending order.");
}